{"@programName": "OWASP ZAP", "@version": "2.13.0", "@generated": "Thu, 10 Aug 2023 16:12:08", "site": [{"@name": "https://coda-wms-demo.azurewebsites.net", "@host": "coda-wms-demo.azurewebsites.net", "@port": "443", "@ssl": "true", "alerts": [{"pluginid": "10202", "alertRef": "10202", "alert": "Absence of Anti-CSRF Tokens", "name": "Absence of Anti-CSRF Tokens", "riskcode": "2", "confidence": "1", "riskdesc": "Medium (Low)", "desc": "<p>No Anti-CSRF tokens were found in a HTML submission form.</p><p>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.</p><p></p><p>CSRF attacks are effective in a number of situations, including:</p><p>    * The victim has an active session on the target site.</p><p>    * The victim is authenticated via HTTP auth on the target site.</p><p>    * The victim is on the same local network as the target site.</p><p></p><p>CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "GET", "param": "", "attack": "", "evidence": "<form method=\"post\" action=\"./login-forgotten.aspx\" id=\"ctl00\">", "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"__EVENTARGUMENT\" \"__EVENTTARGET\" \"__EVENTVALIDATION\" \"__VIEWSTATE\" \"__VIEWSTATEGENERATOR\" \"Content_username\" \"ctl00$Content$ctl01\" ]."}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "", "attack": "", "evidence": "<form method=\"post\" action=\"./login.aspx\" id=\"Login\">", "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"__EVENTARGUMENT\" \"__EVENTTARGET\" \"__EVENTVALIDATION\" \"__VIEWSTATE\" \"__VIEWSTATEGENERATOR\" \"Content_password\" \"Content_remember\" \"Content_username\" \"ctl00$Content$ctl00\" ]."}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "", "attack": "", "evidence": "<form method=\"post\" action=\"./login.aspx?contract\" id=\"FormMain\" onsubmit=\"return onFormSubmit();\">", "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"__EVENTARGUMENT\" \"__EVENTTARGET\" \"__EVENTVALIDATION\" \"__VIEWSTATE\" \"__VIEWSTATEGENERATOR\" \"ContractAccount\" \"ContractCode\" \"FullWidth_PreLoginButton\" \"FullWidth_username\" ]."}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "POST", "param": "", "attack": "", "evidence": "<form method=\"post\" action=\"./login-forgotten.aspx\" id=\"ctl00\">", "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"__EVENTARGUMENT\" \"__EVENTTARGET\" \"__EVENTVALIDATION\" \"__VIEWSTATE\" \"__VIEWSTATEGENERATOR\" \"Content_username\" \"ctl00$Content$ctl01\" ]."}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "", "attack": "", "evidence": "<form method=\"post\" action=\"./login.aspx\" id=\"Login\">", "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"__EVENTARGUMENT\" \"__EVENTTARGET\" \"__EVENTVALIDATION\" \"__VIEWSTATE\" \"__VIEWSTATEGENERATOR\" \"Content_password\" \"Content_remember\" \"Content_username\" \"ctl00$Content$ctl00\" ]."}], "count": "5", "solution": "<p>Phase: Architecture and Design</p><p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</p><p>For example, use anti-CSRF packages such as the OWASP CSRFGuard.</p><p></p><p>Phase: Implementation</p><p>Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.</p><p></p><p>Phase: Architecture and Design</p><p>Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).</p><p>Note that this can be bypassed using XSS.</p><p></p><p>Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.</p><p>Note that this can be bypassed using XSS.</p><p></p><p>Use the ESAPI Session Management control.</p><p>This control includes a component for CSRF.</p><p></p><p>Do not use the GET method for any request that triggers a state change.</p><p></p><p>Phase: Implementation</p><p>Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</p>", "otherinfo": "<p>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"__EVENTARGUMENT\" \"__EVENTTARGET\" \"__EVENTVALIDATION\" \"__VIEWSTATE\" \"__VIEWSTATEGENERATOR\" \"Content_username\" \"ctl00$Content$ctl01\" ].</p>", "reference": "<p>http://projects.webappsec.org/Cross-Site-Request-Forgery</p><p>http://cwe.mitre.org/data/definitions/352.html</p>", "cweid": "352", "wascid": "9", "sourceid": "120"}, {"pluginid": "10038", "alertRef": "10038-1", "alert": "Content Security Policy (CSP) Header Not Set", "name": "Content Security Policy (CSP) Header Not Set", "riskcode": "2", "confidence": "3", "riskdesc": "Medium (High)", "desc": "<p>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/$", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/sitemap.xml", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "POST", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "", "attack": "", "evidence": "", "otherinfo": ""}], "count": "7", "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.</p>", "otherinfo": "", "reference": "<p>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy</p><p>https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html</p><p>http://www.w3.org/TR/CSP/</p><p>http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html</p><p>http://www.html5rocks.com/en/tutorials/security/content-security-policy/</p><p>http://caniuse.com/#feat=contentsecuritypolicy</p><p>http://content-security-policy.com/</p>", "cweid": "693", "wascid": "15", "sourceid": "109"}, {"pluginid": "10020", "alertRef": "10020-1", "alert": "Missing Anti-clickjacking Header", "name": "Missing Anti-clickjacking Header", "riskcode": "2", "confidence": "2", "riskdesc": "Medium (Medium)", "desc": "<p>The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "GET", "param": "x-frame-options", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "x-frame-options", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "x-frame-options", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "POST", "param": "x-frame-options", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "x-frame-options", "attack": "", "evidence": "", "otherinfo": ""}], "count": "5", "solution": "<p>Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.</p><p>If you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.</p>", "otherinfo": "", "reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options</p>", "cweid": "1021", "wascid": "15", "sourceid": "120"}, {"pluginid": "10003", "alertRef": "10003", "alert": "Vulnerable JS Library", "name": "Vulnerable JS Library", "riskcode": "2", "confidence": "2", "riskdesc": "Medium (Medium)", "desc": "<p>The identified library jquery, version 3.4.1 is vulnerable.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "jquery-3.4.1.js", "otherinfo": "CVE-2020-11023\nCVE-2020-11022\n"}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-ui.min.js", "method": "GET", "param": "", "attack": "", "evidence": "/*! jQuery UI - v1.12.1", "otherinfo": "CVE-2021-41184\nCVE-2021-41183\nCVE-2021-41182\nCVE-2022-31160\n"}], "count": "2", "solution": "<p>Please upgrade to the latest version of jquery.</p>", "otherinfo": "<p>CVE-2020-11023</p><p>CVE-2020-11022</p><p></p>", "reference": "<p>https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/</p><p></p>", "cweid": "829", "wascid": "-1", "sourceid": "130"}, {"pluginid": "10010", "alertRef": "10010", "alert": "Cookie No HttpOnly Flag", "name": "Cookie No HttpOnly Flag", "riskcode": "1", "confidence": "2", "riskdesc": "Low (Medium)", "desc": "<p>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}], "count": "1", "solution": "<p>Ensure that the HttpOnly flag is set for all cookies.</p>", "otherinfo": "", "reference": "<p>https://owasp.org/www-community/HttpOnly</p>", "cweid": "1004", "wascid": "13", "sourceid": "147"}, {"pluginid": "10011", "alertRef": "10011", "alert": "Cookie Without Secure Flag", "name": "Cookie Without Secure Flag", "riskcode": "1", "confidence": "2", "riskdesc": "Low (Medium)", "desc": "<p>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}], "count": "1", "solution": "<p>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.</p>", "otherinfo": "", "reference": "<p>https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html</p>", "cweid": "614", "wascid": "13", "sourceid": "147"}, {"pluginid": "10054", "alertRef": "10054", "alert": "Cookie with SameSite Attribute None", "name": "Cookie with SameSite Attribute None", "riskcode": "1", "confidence": "2", "riskdesc": "Low (Medium)", "desc": "<p>A cookie has been set with its SameSite attribute set to \"none\", which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "ARRAffinitySameSite", "attack": "", "evidence": "Set-Cookie: ARRAffinitySameSite", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/robots.txt", "method": "GET", "param": "ARRAffinitySameSite", "attack": "", "evidence": "Set-Cookie: ARRAffinitySameSite", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/sitemap.xml", "method": "GET", "param": "ARRAffinitySameSite", "attack": "", "evidence": "Set-Cookie: ARRAffinitySameSite", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "guid", "attack": "", "evidence": "Set-Cookie: guid", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "username", "attack": "", "evidence": "Set-Cookie: username", "otherinfo": ""}], "count": "5", "solution": "<p>Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.</p>", "otherinfo": "", "reference": "<p>https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site</p>", "cweid": "1275", "wascid": "13", "sourceid": "105"}, {"pluginid": "10054", "alertRef": "10054", "alert": "Cookie without SameSite Attribute", "name": "Cookie without SameSite Attribute", "riskcode": "1", "confidence": "2", "riskdesc": "Low (Medium)", "desc": "<p>A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "ARRAffinity", "attack": "", "evidence": "Set-Cookie: ARRAffinity", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/robots.txt", "method": "GET", "param": "ARRAffinity", "attack": "", "evidence": "Set-Cookie: ARRAffinity", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/sitemap.xml", "method": "GET", "param": "ARRAffinity", "attack": "", "evidence": "Set-Cookie: ARRAffinity", "otherinfo": ""}], "count": "4", "solution": "<p>Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.</p>", "otherinfo": "", "reference": "<p>https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site</p>", "cweid": "1275", "wascid": "13", "sourceid": "105"}, {"pluginid": "10017", "alertRef": "10017", "alert": "Cross-Domain JavaScript Source File Inclusion", "name": "Cross-Domain JavaScript Source File Inclusion", "riskcode": "1", "confidence": "2", "riskdesc": "Low (Medium)", "desc": "<p>The page includes one or more script files from a third-party domain.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js", "attack": "", "evidence": "<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js", "attack": "", "evidence": "<script src=\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\"></script>", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js", "attack": "", "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" crossorigin=\"anonymous\"></script>", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js", "attack": "", "evidence": "<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" crossorigin=\"anonymous\"></script>", "otherinfo": ""}], "count": "4", "solution": "<p>Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.</p>", "otherinfo": "", "reference": "", "cweid": "829", "wascid": "15", "sourceid": "147"}, {"pluginid": "10037", "alertRef": "10037", "alert": "Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s)", "name": "Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s)", "riskcode": "1", "confidence": "2", "riskdesc": "Low (Medium)", "desc": "<p>The web/application server is leaking information via one or more \"X-Powered-By\" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/$", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/css/bootstrap.css", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/css/jquery-ui.css", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/css/style.css", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/bootstrap.min.js", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/creative.js", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-ui.min.js", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/popper.min.js", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/scrollreveal.js", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/favicon.png", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/robots.txt", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/sitemap.xml", "method": "GET", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "POST", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "", "attack": "", "evidence": "X-Powered-By: ASP.NET", "otherinfo": ""}], "count": "21", "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to suppress \"X-Powered-By\" headers.</p>", "otherinfo": "", "reference": "<p>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx</p><p>http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html</p>", "cweid": "200", "wascid": "13", "sourceid": "108"}, {"pluginid": "10036", "alertRef": "10036", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "riskcode": "1", "confidence": "3", "riskdesc": "Low (High)", "desc": "<p>The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/$", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/css/bootstrap.css", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/css/jquery-ui.css", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/css/style.css", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/bootstrap.min.js", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/creative.js", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-ui.min.js", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/popper.min.js", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/scrollreveal.js", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/favicon.png", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/robots.txt", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/sitemap.xml", "method": "GET", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "POST", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "", "attack": "", "evidence": "Microsoft-IIS/10.0", "otherinfo": ""}], "count": "21", "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.</p>", "otherinfo": "", "reference": "<p>http://httpd.apache.org/docs/current/mod/core.html#servertokens</p><p>http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007</p><p>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx</p><p>http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html</p>", "cweid": "200", "wascid": "13", "sourceid": "108"}, {"pluginid": "10035", "alertRef": "10035", "alert": "Strict-Transport-Security Header Not Set", "name": "Strict-Transport-Security Header Not Set", "riskcode": "1", "confidence": "3", "riskdesc": "Low (High)", "desc": "<p>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/$", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/css/bootstrap.css", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/css/jquery-ui.css", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/css/style.css", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/bootstrap.min.js", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/creative.js", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-ui.min.js", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/popper.min.js", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/scrollreveal.js", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/favicon.png", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/robots.txt", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/sitemap.xml", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "POST", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "", "attack": "", "evidence": "", "otherinfo": ""}], "count": "18", "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.</p>", "otherinfo": "", "reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html</p><p>https://owasp.org/www-community/Security_Headers</p><p>http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security</p><p>http://caniuse.com/stricttransportsecurity</p><p>http://tools.ietf.org/html/rfc6797</p>", "cweid": "319", "wascid": "15", "sourceid": "109"}, {"pluginid": "10061", "alertRef": "10061", "alert": "X-AspNet-Version Response Header", "name": "X-AspNet-Version Response Header", "riskcode": "1", "confidence": "3", "riskdesc": "Low (High)", "desc": "<p>Server leaks information via \"X-AspNet-Version\"/\"X-AspNetMvc-Version\" HTTP response header field(s).</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/", "method": "GET", "param": "", "attack": "", "evidence": "4.0.30319", "otherinfo": "An attacker can use this information to exploit known vulnerabilities."}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "GET", "param": "", "attack": "", "evidence": "4.0.30319", "otherinfo": "An attacker can use this information to exploit known vulnerabilities."}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "", "attack": "", "evidence": "4.0.30319", "otherinfo": "An attacker can use this information to exploit known vulnerabilities."}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/", "method": "GET", "param": "", "attack": "", "evidence": "4.0.30319", "otherinfo": "An attacker can use this information to exploit known vulnerabilities."}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "", "attack": "", "evidence": "4.0.30319", "otherinfo": "An attacker can use this information to exploit known vulnerabilities."}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "POST", "param": "", "attack": "", "evidence": "4.0.30319", "otherinfo": "An attacker can use this information to exploit known vulnerabilities."}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "", "attack": "", "evidence": "4.0.30319", "otherinfo": "An attacker can use this information to exploit known vulnerabilities."}], "count": "7", "solution": "<p>Configure the server so it will not return those headers.</p>", "otherinfo": "<p>An attacker can use this information to exploit known vulnerabilities.</p>", "reference": "<p>https://www.troyhunt.com/shhh-dont-let-your-response-headers/</p><p>https://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/</p>", "cweid": "933", "wascid": "14", "sourceid": "108"}, {"pluginid": "10021", "alertRef": "10021", "alert": "X-Content-Type-Options Header Missing", "name": "X-Content-Type-Options Header Missing", "riskcode": "1", "confidence": "2", "riskdesc": "Low (Medium)", "desc": "<p>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/assets/css/bootstrap.css", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/css/jquery-ui.css", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/css/style.css", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/bootstrap.min.js", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/creative.js", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-ui.min.js", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/popper.min.js", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/scrollreveal.js", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/favicon.png", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/robots.txt", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "POST", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}], "count": "16", "solution": "<p>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.</p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</p>", "otherinfo": "<p>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.</p><p>At \"High\" threshold this scan rule will not alert on client or server error responses.</p>", "reference": "<p>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx</p><p>https://owasp.org/www-community/Security_Headers</p>", "cweid": "693", "wascid": "15", "sourceid": "127"}, {"pluginid": "10111", "alertRef": "10111", "alert": "Authentication Request Identified", "name": "Authentication Request Identified", "riskcode": "0", "confidence": "3", "riskdesc": "Informational (High)", "desc": "<p>The given request has been identified as an authentication request. The 'Other Info' field contains a set of key=value lines which identify any relevant fields. If the request is in a context which has an Authentication Method set to \"Auto-Detect\" then this rule will change the authentication to match the request identified.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "ctl00$Content$username", "attack": "", "evidence": "ctl00$Content$password", "otherinfo": "userParam=ctl00$Content$username\nuserValue=foo-bar@example.com\npasswordParam=ctl00$Content$password\nreferer=https://coda-wms-demo.azurewebsites.net/login.aspx"}], "count": "1", "solution": "<p>This is an informational alert rather than a vulnerability and so there is nothing to fix.</p>", "otherinfo": "<p>userParam=ctl00$Content$username</p><p>userValue=foo-bar@example.com</p><p>passwordParam=ctl00$Content$password</p><p>referer=https://coda-wms-demo.azurewebsites.net/login.aspx</p>", "reference": "<p>https://www.zaproxy.org/docs/desktop/addons/authentication-helper/auth-req-id/</p>", "cweid": "-1", "wascid": "-1", "sourceid": "137"}, {"pluginid": "10029", "alertRef": "10029", "alert": "Cookie Poisoning", "name": "Cookie Poisoning", "riskcode": "0", "confidence": "1", "riskdesc": "Informational (Low)", "desc": "<p>This check looks at user-supplied input in query string parameters and POST data to identify where cookie parameters might be controlled. This is called a cookie poisoning attack, and becomes exploitable when an attacker can manipulate the cookie in various ways. In some cases this will not be exploitable, however, allowing URL parameters to set cookie values is generally considered a bug.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "ctl00$Content$username", "attack": "", "evidence": "", "otherinfo": "An attacker may be able to poison cookie values through POST parameters. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example:  http://nottrusted.com/page?value=maliciousInput.\r\n\r\nThis was identified at:\r\n\r\nhttps://coda-wms-demo.azurewebsites.net/login.aspx\r\n\r\nUser-input was found in the following cookie:\r\nusername=foo-bar@example.com; expires=Thu, 17-Aug-2023 15:09:47 GMT; path=/; secure; HttpOnly; SameSite=None\r\n\r\nThe user input was:\r\nctl00$Content$username=foo-bar@example.com"}], "count": "1", "solution": "<p>Do not allow user input to control cookie names and values. If some query string parameters must be set in cookie values, be sure to filter out semicolon's that can serve as name/value pair delimiters.</p>", "otherinfo": "<p>An attacker may be able to poison cookie values through POST parameters. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example:  http://nottrusted.com/page?value=maliciousInput.</p><p></p><p>This was identified at:</p><p></p><p>https://coda-wms-demo.azurewebsites.net/login.aspx</p><p></p><p>User-input was found in the following cookie:</p><p>username=foo-bar@example.com; expires=Thu, 17-Aug-2023 15:09:47 GMT; path=/; secure; HttpOnly; SameSite=None</p><p></p><p>The user input was:</p><p>ctl00$Content$username=foo-bar@example.com</p>", "reference": "<p>http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-cookie</p>", "cweid": "20", "wascid": "20", "sourceid": "137"}, {"pluginid": "10027", "alertRef": "10027", "alert": "Information Disclosure - Suspicious Comments", "name": "Information Disclosure - Suspicious Comments", "riskcode": "0", "confidence": "1", "riskdesc": "Informational (Low)", "desc": "<p>The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/bootstrap.min.js", "method": "GET", "param": "", "attack": "", "evidence": "from", "otherinfo": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?e(exports,require(\"jquery\"),require(\"popper.js\")):\"function\"\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "bug", "otherinfo": "The following pattern was used: \\bBUG\\b and was detected 7 times, the first in the element starting with: \"\t// We allow this because of a bug in IE8/9 that throws an error\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "bugs", "otherinfo": "The following pattern was used: \\bBUGS\\b and was detected 9 times, the first in the element starting with: \"\t// https://bugs.jquery.com/ticket/4833\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "from", "otherinfo": "The following pattern was used: \\bFROM\\b and was detected 51 times, the first in the element starting with: \"\t\t// Return just the one element from the set\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "later", "otherinfo": "The following pattern was used: \\bLATER\\b and was detected 8 times, the first in the element starting with: \"\t\t\t// IE8 throws error here and will not see later tests\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "query", "otherinfo": "The following pattern was used: \\bQUERY\\b and was detected 2 times, the first in the element starting with: \"\t\t// want to query the value if it is a CSS custom property\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "select", "otherinfo": "The following pattern was used: \\bSELECT\\b and was detected 18 times, the first in the element starting with: \"\tselect,\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "TODO", "otherinfo": "The following pattern was used: \\bTODO\\b and was detected 4 times, the first in the element starting with: \"\t\t\t\t\t\t\t// TODO: identify versions\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "user", "otherinfo": "The following pattern was used: \\bUSER\\b and was detected 9 times, the first in the element starting with: \"\t// Can be adjusted by the user\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "username", "otherinfo": "The following pattern was used: \\bUSERNAME\\b and was detected 2 times, the first in the element starting with: \"\t\tusername: null,\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-3.4.1.js", "method": "GET", "param": "", "attack": "", "evidence": "where", "otherinfo": "The following pattern was used: \\bWHERE\\b and was detected 10 times, the first in the element starting with: \"\t\t// For CommonJS and CommonJS-like environments where a proper `window`\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-ui.min.js", "method": "GET", "param": "", "attack": "", "evidence": "from", "otherinfo": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"(function(t){\"function\"==typeof define&&define.amd?define([\"jquery\"],t):t(jQuery)})(function(t){function e(t){for(var e=t.css(\"v\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/jquery-ui.min.js", "method": "GET", "param": "", "attack": "", "evidence": "select", "otherinfo": "The following pattern was used: \\bSELECT\\b and was detected 5 times, the first in the element starting with: \"}}(t.fn.show),hide:function(t){return function(s){if(i(s))return t.apply(this,arguments);var n=e.apply(this,arguments);return n.\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/scrollreveal.js", "method": "GET", "param": "", "attack": "", "evidence": "from", "otherinfo": "The following pattern was used: \\bFROM\\b and was detected 4 times, the first in the element starting with: \"    // Starting angles in degrees, will transition from these values to 0 in all axes.\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/scrollreveal.js", "method": "GET", "param": "", "attack": "", "evidence": "query", "otherinfo": "The following pattern was used: \\bQUERY\\b and was detected in the element starting with: \"   * otherwise query the container using target as a selector.\", see evidence field for the suspicious comment/snippet."}, {"uri": "https://coda-wms-demo.azurewebsites.net/assets/js/scrollreveal.js", "method": "GET", "param": "", "attack": "", "evidence": "user", "otherinfo": "The following pattern was used: \\bUSER\\b and was detected in the element starting with: \"      // https://github.com/jlmakes/scrollreveal.js#42-improve-user-experience\", see evidence field for the suspicious comment/snippet."}], "count": "16", "solution": "<p>Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.</p>", "otherinfo": "<p>The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?e(exports,require(\"jquery\"),require(\"popper.js\")):\"function\"\", see evidence field for the suspicious comment/snippet.</p>", "reference": "", "cweid": "200", "wascid": "13", "sourceid": "136"}, {"pluginid": "10109", "alertRef": "10109", "alert": "Modern Web Application", "name": "Modern Web Application", "riskcode": "0", "confidence": "2", "riskdesc": "Informational (Medium)", "desc": "<p>The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "", "attack": "", "evidence": "<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>", "otherinfo": "No links have been found while there are scripts, which is an indication that this is a modern web application."}], "count": "1", "solution": "<p>This is an informational alert and so no changes are required.</p>", "otherinfo": "<p>No links have been found while there are scripts, which is an indication that this is a modern web application.</p>", "reference": "", "cweid": "-1", "wascid": "-1", "sourceid": "147"}, {"pluginid": "10015", "alertRef": "10015", "alert": "Re-examine Cache-control Directives", "name": "Re-examine Cache-control Directives", "riskcode": "0", "confidence": "1", "riskdesc": "Informational (Low)", "desc": "<p>The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "GET", "param": "cache-control", "attack": "", "evidence": "private", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "cache-control", "attack": "", "evidence": "private", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "cache-control", "attack": "", "evidence": "private", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/robots.txt", "method": "GET", "param": "cache-control", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "POST", "param": "cache-control", "attack": "", "evidence": "private", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "cache-control", "attack": "", "evidence": "private", "otherinfo": ""}], "count": "6", "solution": "<p>For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".</p>", "otherinfo": "", "reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching</p><p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control</p><p>https://grayduck.mn/2021/09/13/cache-control-recommendations/</p>", "cweid": "525", "wascid": "13", "sourceid": "120"}, {"pluginid": "10112", "alertRef": "10112", "alert": "Session Management Response Identified", "name": "Session Management Response Identified", "riskcode": "0", "confidence": "2", "riskdesc": "Informational (Medium)", "desc": "<p>The given response has been identified as containing a session management token. The 'Other Info' field contains a set of header tokens that can be used in the Header Based Session Management Method. If the request is in a context which has a Session Management Method set to \"Auto-Detect\" then this rule will change the session management to use the tokens identified.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "ARRAffinity", "attack": "", "evidence": "46bc5b3faa13dc4cc871a11946413f29994993170dc1668f4e3cbf7a3eeacd23", "otherinfo": "\ncookie:ARRAffinity\ncookie:ARRAffinitySameSite"}, {"uri": "https://coda-wms-demo.azurewebsites.net/portal/login.aspx?contract", "method": "GET", "param": "expires", "attack": "", "evidence": "Fri, 11-Aug-2023 15:09:47 GMT", "otherinfo": "\ncookie:expires"}, {"uri": "https://coda-wms-demo.azurewebsites.net/robots.txt", "method": "GET", "param": "ARRAffinity", "attack": "", "evidence": "46bc5b3faa13dc4cc871a11946413f29994993170dc1668f4e3cbf7a3eeacd23", "otherinfo": "\ncookie:ARRAffinity\ncookie:ARRAffinitySameSite"}, {"uri": "https://coda-wms-demo.azurewebsites.net/sitemap.xml", "method": "GET", "param": "ARRAffinity", "attack": "", "evidence": "46bc5b3faa13dc4cc871a11946413f29994993170dc1668f4e3cbf7a3eeacd23", "otherinfo": "\ncookie:ARRAffinity\ncookie:ARRAffinitySameSite"}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "username", "attack": "", "evidence": "foo-bar@example.com", "otherinfo": "\ncookie:username"}, {"uri": "https://coda-wms-demo.azurewebsites.net/1386508369990557727.aspx", "method": "GET", "param": "ARRAffinity", "attack": "", "evidence": "46bc5b3faa13dc4cc871a11946413f29994993170dc1668f4e3cbf7a3eeacd23", "otherinfo": "\ncookie:ARRAffinity"}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "ARRAffinity", "attack": "", "evidence": "46bc5b3faa13dc4cc871a11946413f29994993170dc1668f4e3cbf7a3eeacd23", "otherinfo": "\ncookie:ARRAffinity"}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx?-s", "method": "GET", "param": "ARRAffinity", "attack": "", "evidence": "46bc5b3faa13dc4cc871a11946413f29994993170dc1668f4e3cbf7a3eeacd23", "otherinfo": "\ncookie:ARRAffinity"}, {"uri": "https://coda-wms-demo.azurewebsites.net/WEB-INF/applicationContext.xml", "method": "GET", "param": "ARRAffinity", "attack": "", "evidence": "46bc5b3faa13dc4cc871a11946413f29994993170dc1668f4e3cbf7a3eeacd23", "otherinfo": "\ncookie:ARRAffinity"}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "username", "attack": "", "evidence": "foo-bar@example.com", "otherinfo": "\ncookie:username"}], "count": "10", "solution": "<p>This is an informational alert rather than a vulnerability and so there is nothing to fix.</p>", "otherinfo": "<p></p><p>cookie:ARRAffinity</p><p>cookie:ARRAffinitySameSite</p>", "reference": "<p>https://www.zaproxy.org/docs/desktop/addons/authentication-helper/session-mgmt-id</p>", "cweid": "-1", "wascid": "-1", "sourceid": "105"}, {"pluginid": "10104", "alertRef": "10104", "alert": "User Agent Fuzzer", "name": "User Agent Fuzzer", "riskcode": "0", "confidence": "2", "riskdesc": "Informational (Medium)", "desc": "<p>Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "Header User-Agent", "attack": "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "Header User-Agent", "attack": "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "Header User-Agent", "attack": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "Header User-Agent", "attack": "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "Header User-Agent", "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "Header User-Agent", "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "Header User-Agent", "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "Header User-Agent", "attack": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "Header User-Agent", "attack": "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "Header User-Agent", "attack": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "Header User-Agent", "attack": "Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16", "evidence": "", "otherinfo": ""}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "GET", "param": "Header User-Agent", "attack": "msnbot/1.1 (+http://search.msn.com/msnbot.htm)", "evidence": "", "otherinfo": ""}], "count": "12", "solution": "", "otherinfo": "", "reference": "<p>https://owasp.org/wstg</p>", "cweid": "0", "wascid": "0", "sourceid": "235"}, {"pluginid": "10031", "alertRef": "10031", "alert": "User Controllable HTML Element Attribute (Potential XSS)", "name": "User Controllable HTML Element Attribute (Potential XSS)", "riskcode": "0", "confidence": "1", "riskdesc": "Informational (Low)", "desc": "<p>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.</p>", "instances": [{"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "POST", "param": "__VIEWSTATEGENERATOR", "attack": "", "evidence": "", "otherinfo": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://coda-wms-demo.azurewebsites.net/login-forgotten.aspx\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\n__VIEWSTATEGENERATOR=ADBA3D97\r\n\r\nThe user-controlled value was:\r\nadba3d97"}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "POST", "param": "ctl00$Content$ctl01", "attack": "", "evidence": "", "otherinfo": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://coda-wms-demo.azurewebsites.net/login-forgotten.aspx\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nctl00$Content$ctl01=Reset My Password\r\n\r\nThe user-controlled value was:\r\nreset my password"}, {"uri": "https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx", "method": "POST", "param": "ctl00$Content$username", "attack": "", "evidence": "", "otherinfo": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://coda-wms-demo.azurewebsites.net/login-forgotten.aspx\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nctl00$Content$username=foo-bar@example.com\r\n\r\nThe user-controlled value was:\r\nfoo-bar@example.com"}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "__VIEWSTATEGENERATOR", "attack": "", "evidence": "", "otherinfo": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://coda-wms-demo.azurewebsites.net/login.aspx\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\n__VIEWSTATEGENERATOR=C2EE9ABB\r\n\r\nThe user-controlled value was:\r\nc2ee9abb"}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "ctl00$Content$ctl00", "attack": "", "evidence": "", "otherinfo": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://coda-wms-demo.azurewebsites.net/login.aspx\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nctl00$Content$ctl00=Sign Me In\r\n\r\nThe user-controlled value was:\r\nsign me in"}, {"uri": "https://coda-wms-demo.azurewebsites.net/login.aspx", "method": "POST", "param": "ctl00$Content$username", "attack": "", "evidence": "", "otherinfo": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://coda-wms-demo.azurewebsites.net/login.aspx\r\n\r\nappears to include user input in: \r\n\r\na(n) [input] tag [value] attribute \r\n\r\nThe user input found was:\r\nctl00$Content$username=foo-bar@example.com\r\n\r\nThe user-controlled value was:\r\nfoo-bar@example.com"}], "count": "6", "solution": "<p>Validate all input and sanitize output it before writing to any HTML attributes.</p>", "otherinfo": "<p>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:</p><p></p><p>https://coda-wms-demo.azurewebsites.net/login-forgotten.aspx</p><p></p><p>appears to include user input in: </p><p></p><p>a(n) [input] tag [value] attribute </p><p></p><p>The user input found was:</p><p>__VIEWSTATEGENERATOR=ADBA3D97</p><p></p><p>The user-controlled value was:</p><p>adba3d97</p>", "reference": "<p>http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute</p>", "cweid": "20", "wascid": "20", "sourceid": "138"}]}, {"@name": "https://public-firing-range.appspot.com", "@host": "public-firing-range.appspot.com", "@port": "443", "@ssl": "true", "alerts": [{"pluginid": "10038", "alertRef": "10038-1", "alert": "Content Security Policy (CSP) Header Not Set", "name": "Content Security Policy (CSP) Header Not Set", "riskcode": "2", "confidence": "3", "riskdesc": "Medium (High)", "desc": "<p>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</p>", "instances": [{"uri": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/innerHtml", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://public-firing-range.appspot.com/robots.txt", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://public-firing-range.appspot.com/sitemap.xml", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}], "count": "3", "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.</p>", "otherinfo": "", "reference": "<p>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy</p><p>https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html</p><p>http://www.w3.org/TR/CSP/</p><p>http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html</p><p>http://www.html5rocks.com/en/tutorials/security/content-security-policy/</p><p>http://caniuse.com/#feat=contentsecuritypolicy</p><p>http://content-security-policy.com/</p>", "cweid": "693", "wascid": "15", "sourceid": "6"}, {"pluginid": "10020", "alertRef": "10020-1", "alert": "Missing Anti-clickjacking Header", "name": "Missing Anti-clickjacking Header", "riskcode": "2", "confidence": "2", "riskdesc": "Medium (Medium)", "desc": "<p>The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.</p>", "instances": [{"uri": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/innerHtml", "method": "GET", "param": "x-frame-options", "attack": "", "evidence": "", "otherinfo": ""}], "count": "1", "solution": "<p>Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.</p><p>If you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.</p>", "otherinfo": "", "reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options</p>", "cweid": "1021", "wascid": "15", "sourceid": "6"}, {"pluginid": "10035", "alertRef": "10035", "alert": "Strict-Transport-Security Header Not Set", "name": "Strict-Transport-Security Header Not Set", "riskcode": "1", "confidence": "3", "riskdesc": "Low (High)", "desc": "<p>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.</p>", "instances": [{"uri": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/innerHtml", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://public-firing-range.appspot.com/robots.txt", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}, {"uri": "https://public-firing-range.appspot.com/sitemap.xml", "method": "GET", "param": "", "attack": "", "evidence": "", "otherinfo": ""}], "count": "3", "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.</p>", "otherinfo": "", "reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html</p><p>https://owasp.org/www-community/Security_Headers</p><p>http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security</p><p>http://caniuse.com/stricttransportsecurity</p><p>http://tools.ietf.org/html/rfc6797</p>", "cweid": "319", "wascid": "15", "sourceid": "6"}, {"pluginid": "10021", "alertRef": "10021", "alert": "X-Content-Type-Options Header Missing", "name": "X-Content-Type-Options Header Missing", "riskcode": "1", "confidence": "2", "riskdesc": "Low (Medium)", "desc": "<p>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</p>", "instances": [{"uri": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/innerHtml", "method": "GET", "param": "x-content-type-options", "attack": "", "evidence": "", "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."}], "count": "1", "solution": "<p>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.</p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</p>", "otherinfo": "<p>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.</p><p>At \"High\" threshold this scan rule will not alert on client or server error responses.</p>", "reference": "<p>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx</p><p>https://owasp.org/www-community/Security_Headers</p>", "cweid": "693", "wascid": "15", "sourceid": "6"}, {"pluginid": "10109", "alertRef": "10109", "alert": "Modern Web Application", "name": "Modern Web Application", "riskcode": "0", "confidence": "2", "riskdesc": "Informational (Medium)", "desc": "<p>The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.</p>", "instances": [{"uri": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/innerHtml", "method": "GET", "param": "", "attack": "", "evidence": "<script>\n      if (window.name == \"\") {\n  window.name = \"badvalue='a'\";\n}\n\nvar payload = window.name;\n\nsetTimeout(function() {\n  trigger(window.name);\n}, 10);\nvar div = document.createElement('div');\ndocument.documentElement.appendChild(div);\n\n// Sync trigger.\ndiv.innerHTML = payload;\n\n// Async trigger.\nfunction trigger(payload) {\n  div.innerHTML = payload;\n};\n\n    </script>", "otherinfo": "No links have been found while there are scripts, which is an indication that this is a modern web application."}], "count": "1", "solution": "<p>This is an informational alert and so no changes are required.</p>", "otherinfo": "<p>No links have been found while there are scripts, which is an indication that this is a modern web application.</p>", "reference": "", "cweid": "-1", "wascid": "-1", "sourceid": "6"}]}]}